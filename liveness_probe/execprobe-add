apiVersion: v1
kind: Pod
metadata:  
  name: liveness-pod
spec:  
  containers:  
  - name: liveness    
    image: gcr.io/terrycho-sandbox/liveness:v1    
    imagePullPolicy: Always    
    ports:    
    - containerPort: 8080    
    livenessProbe:      
      exec:         # Command probe는 컨테이너의 상태 체크를 쉘 명령을 수행하고 나서, 그 결과를 가지고 컨테이너의 정상여부를 체크
        command:    # 쉘 명령어를 수행한 후, 결과값이 0 이면 성공, 0이 아니면 실패   
        - cat        
        - /tmp/healthy
       initialDelaySeconds: 5   # 컨테이너가 기동 된후 initialDelaySecond에 설정된 값 만큼 대기를 했다가 periodSecond 에 정해진 주기 단위로 컨테이너의 헬스 체크
        # initialDelaySecond를 주는 이유는, 컨테이너가 기동 되면서 애플리케이션이 기동될텐데, 설정 정보나 각종 초기화 작업이 필요하기 때문에, 컨테이너가 기동되자 마자 헬스 체크를 하게 되면, 서비스할 준비가 되지 않았기 때문에 헬스 체크에 실패할 수 있기 때문에, 준비 기간을 주는 것
       periodSeconds: 5   # 준비 시간이 끝나면, periodSecond에 정의된 주기에 따라 헬스 체크를 진행
       
# /tmp/headlthy 인위적 삭제
# kubectl exec -it liveness-probe-pod -- cat /tmp/healthy
# kubectl exec -it liveness-probe-pod -- rm /tmp/healthy
# kubectl exec -it liveness-probe-pod -- cat /tmp/healthy
# cat /tmp/healthy 는 exit code 1 을 내면서 에러로 종료
# 수초 후에, 해당 컨테이너가 재 시작되는데, kubectl get pod 명령을 이용하여 pod의 상태를 확인
# kubetcl get pod
# liveness-pod는 정상적으로 실행되고는 있지만, RESTARTS 항목을 보면 한번 리스타트가 된것을 볼 수 있다.
# kubectl describe pod liveness-pod
#  “Killing container with id docker://liveness:Container failed liveness probe.. Container will be killed and recreated.” 메세지가 나오면서 liveness probe 체크가 실패하고, 컨테이너를 재 시작하는 것을 확인
